---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: ald2  # REPLACE THIS
  version: "1.33" 
  region: ap-southeast-1 # REPLACE THIS
  tags:   # REPLACE THIS
    owner: aldred.halim
    no-reap: "true"
    purpose: other
    expire-on: "2030-12-31"

iam:
  podIdentityAssociations:
  - namespace: kube-system
    serviceAccountName: aws-load-balancer-controller
    createServiceAccount: true
    # REPLACE THIS - Replace with the ARN of the IAM role that you created for AWS Load Balancer Controller
    roleARN: arn:aws:iam::979559056307:role/EKSPodIdentityAWSLBController 

  - namespace: external-dns
    serviceAccountName: external-dns
    createServiceAccount: true
    # REPLACE THIS - Replace with the ARN of the IAM role that you created the ExternalDNS
    roleARN: arn:aws:iam::979559056307:role/EKSPodIdentityExternalDNS

  - namespace: cert-manager
    serviceAccountName: cert-manager
    createServiceAccount: true
    # REPLACE THIS - Replace with the ARN of the IAM role that you created the Cert Manager
    roleARN: arn:aws:iam::979559056307:role/EKSPodIdentityCertManager

addons:
- name: eks-pod-identity-agent
  version: latest

- name: vpc-cni
  version: latest
  podIdentityAssociations:
  - namespace: kube-system
    serviceAccountName: aws-node
    createServiceAccount: true
    # REPLACE THIS - Replace with the ARN of the IAM role that you created for VPC CNI
    roleARN: arn:aws:iam::979559056307:role/EKSPodIdentityEKSVPCCNI 

- name: aws-ebs-csi-driver
  version: latest
  podIdentityAssociations:
  - namespace: kube-system
    serviceAccountName: ebs-csi-controller-sa
    createServiceAccount: true
    # REPLACE THIS - Replace with the ARN of the IAM role that you created for EBS CSI Driver
    roleARN: arn:aws:iam::979559056307:role/EKSPodIdentityEBSCSIDriver

- name: coredns
  version: latest

- name: kube-proxy
  version: latest    

vpc:
  # REPLACE THIS
  id: vpc-06e24fa2bb349b464
  subnets:
    # REPLACE THIS - Use private subnets
    private:
      ap-southeast-1a:
        id: "subnet-069e26841c2c7a0f3"
      ap-southeast-1b:
        id: "subnet-0d29d41ea3e6ecd07"

managedNodeGroups:
  - name: m10
    instanceType: m6a.4xlarge
    amiFamily: Bottlerocket
    desiredCapacity: 2
    minSize: 2
    maxSize: 2
    privateNetworking: true
    bottlerocket:
      enableAdminContainer: true
    labels:
      purpose: kubeflow
    iam:
      attachPolicy:
        # So that we can pull from upstream container repositories through ECR pull-through cache
        # https://docs.aws.amazon.com/AmazonECR/latest/userguide/pull-through-cache-iam.html#pull-through-cache-registry-permissions
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - 'ecr:CreateRepository'
          - 'ecr:BatchImportUpstreamImage'
          Resource: '*'


